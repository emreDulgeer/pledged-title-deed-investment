{
	"info": {
		"_postman_id": "9a4ac77f-d2ae-4b36-96b2-a7014668b4ef",
		"name": "Pledged Platform",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23620503"
	},
	"item": [
		{
			"name": "Investments",
			"item": [
				{
					"name": "Investor - Send Investment Offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 201', function () { pm.response.to.have.status(201); });",
									"let json = pm.response.json();",
									"pm.test('Offer sent', function() { pm.expect(json.data.status).to.eql('offer_sent'); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "role",
								"value": "investor",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amountInvested\": 75000\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/investments/property/:propertyId/offer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"investments",
								"property",
								":propertyId",
								"offer"
							],
							"variable": [
								{
									"key": "propertyId",
									"value": "{{propertyIdForInvestment}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Investor - My Investments (Paginate/Filtre/Sıralama)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('Has pagination', function() { pm.expect(json).to.have.property('pagination'); });",
									"pm.test('Investments array', function () { pm.expect(Array.isArray(json.data)).to.be.true; });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "role",
								"value": "investor",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/investments/my?page=1&limit=5&country=Germany",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"investments",
								"my"
							],
							"query": [
								{
									"key": "status",
									"value": "active",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "createdAt",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "country",
									"value": "Germany"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Investor/Owner/Admin/Rep - Get Investment Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('Investment detail exists', function() { pm.expect(json.data).to.have.property('property'); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "role",
								"value": "investor",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/investments/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"investments",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{investmentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Owner - Accept Offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('Offer accepted', function() { pm.expect(json.data.status).to.eql('contract_signed'); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "role",
								"value": "property_owner",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/investments/:id/accept",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"investments",
								":id",
								"accept"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{SendedInvestmentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Owner - Reject Offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('Offer rejected', function() { pm.expect(json.message).to.include('rejected'); });"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "role",
								"value": "property_owner",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/investments/:id/reject",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"investments",
								":id",
								"reject"
							],
							"variable": [
								{
									"key": "id",
									"value": "688c1644d57fb738557d3889"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Owner - Make Rental Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('Rental paid', function() { pm.expect(json.message).to.include('Rental payment marked as paid'); });"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "role",
								"value": "property_owner",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"month\": \"2025-08\",\n  \"paymentReceipt\": \"string\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/investments/:id/payment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"investments",
								":id",
								"payment"
							],
							"variable": [
								{
									"key": "id",
									"value": "688c1644d57fb738557d3889"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Owner/Admin - Get Property Investments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('Investments array', function () { pm.expect(Array.isArray(json.data)).to.be.true; });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "role",
								"value": "property_owner",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/investments/property/:propertyId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"investments",
								"property",
								":propertyId"
							],
							"variable": [
								{
									"key": "propertyId",
									"value": "{{propertyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Investor/Owner/Admin - Upload Contract",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "role",
								"value": "investor",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"contractFile\": \"contract-file-path.pdf\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/investments/:id/contract",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"investments",
								":id",
								"contract"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{SendedInvestmentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Owner/Rep/Admin - Upload Title Deed",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "role",
								"value": "property_owner",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"titleDeedDocument\": \"deed-file-path.pdf\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/investments/:id/title-deed",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"investments",
								":id",
								"title-deed"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{SendedInvestmentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - List All Investments (Paginate/Filtre/Sıralama)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('Has pagination', function() { pm.expect(json).to.have.property('pagination'); });",
									"pm.test('Investments array', function () { pm.expect(Array.isArray(json.data)).to.be.true; });"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "role",
								"value": "admin",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/investments?status=active&page=1&limit=5&sortBy=createdAt",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"investments"
							],
							"query": [
								{
									"key": "status",
									"value": "active"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "sortBy",
									"value": "createdAt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Assign Local Representative",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "role",
								"value": "admin",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"representativeId\": \"688c1644d57fb738557d3899\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/investments/:id/assign-representative",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"investments",
								":id",
								"assign-representative"
							],
							"variable": [
								{
									"key": "id",
									"value": "688c1644d57fb738557d3889"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin/Owner - Process Refund",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "role",
								"value": "property_owner",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount\": 70000\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/investments/:id/refund",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"investments",
								":id",
								"refund"
							],
							"variable": [
								{
									"key": "id",
									"value": "688c1644d57fb738557d3889"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Transfer Property",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "role",
								"value": "admin",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"method\": \"market_sale\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/investments/:id/transfer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"investments",
								":id",
								"transfer"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{SendedInvestmentId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Investor/Owner - Request Local Representative",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "role",
								"value": "investor",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/investments/:id/request-representative",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"investments",
								":id",
								"request-representative"
							],
							"variable": [
								{
									"key": "id",
									"value": "688c1644d57fb738557d3889"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Owner - Get My Rental Payments (Paginate/Filtre/Sıralama)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('Rental payment list paginated', function() { pm.expect(json).to.have.property('pagination'); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "role",
								"value": "property_owner",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/investments/rental-payments/owner?page=1&limit=50",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"investments",
								"rental-payments",
								"owner"
							],
							"query": [
								{
									"key": "status",
									"value": "paid",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Investor - Get My Rental Income (Paginate/Filtre/Sıralama)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('Rental income paginated', function() { pm.expect(json).to.have.property('pagination'); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "role",
								"value": "investor",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/investments/rental-payments/investor?page=1&limit=50",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"investments",
								"rental-payments",
								"investor"
							],
							"query": [
								{
									"key": "status",
									"value": "paid",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin/Rep - Upcoming Rental Payments",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "role",
								"value": "admin",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/investments/reports/upcoming-payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"investments",
								"reports",
								"upcoming-payments"
							],
							"query": [
								{
									"key": "days",
									"value": "10",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin/Rep - Delayed Rental Payments",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "role",
								"value": "admin",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/investments/reports/delayed-payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"investments",
								"reports",
								"delayed-payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin/Owner/Investor - Investment Statistics",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "role",
								"value": "investor",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/investments/:id/statistics",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"investments",
								":id",
								"statistics"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{investmentId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Properties",
			"item": [
				{
					"name": "List - Public Properties (Filtre/Sıralama/Paginate)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('Response has pagination', function() { pm.expect(json).to.have.property('pagination'); });",
									"pm.test('Data is array', function () { pm.expect(Array.isArray(json.data)).to.be.true; });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "role",
								"value": "investor",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/properties?page=1&limit=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"properties"
							],
							"query": [
								{
									"key": "country",
									"value": "Portugal",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Lisbon",
									"disabled": true
								},
								{
									"key": "propertyType",
									"value": "apartment",
									"disabled": true
								},
								{
									"key": "annualYieldPercentMin",
									"value": "15",
									"disabled": true
								},
								{
									"key": "requestedInvestmentMax",
									"value": "100000",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "annualYieldPercent",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Property Detail (Public)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('Has property details', function() { pm.expect(json.data).to.have.property('country'); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "role",
								"value": "investor",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/properties/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"properties",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{propertyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Property (Owner)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 201', function () { pm.response.to.have.status(201); });",
									"let json = pm.response.json();",
									"pm.test('Created property has status draft', function() { pm.expect(json.data.status).to.eql('draft'); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "role",
								"value": "property_owner",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"country\": \"France\",\n  \"city\": \"Paris\",\n  \"fullAddress\": \"Av. Liberdade, 100\",\n  \"propertyType\": \"apartment\",\n  \"size\": 120,\n  \"rooms\": 3,\n  \"estimatedValue\": 300000,\n  \"requestedInvestment\": 70000,\n  \"rentOffered\": 700,\n  \"contractPeriodMonths\": 36,\n  \"images\": [],\n  \"documents\": []\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/properties",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"properties"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Property (Owner)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('Updated property has new value', function() { pm.expect(json.data.rooms).to.eql(4); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "role",
								"value": "property_owner",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Updated Kiralık, manzaralı, çok merkezi!\",\n  \"rooms\": 4\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/properties/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"properties",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{propertyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Property (Owner)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('Delete message', function() { pm.expect(json.message).to.include('deleted'); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "role",
								"value": "property_owner",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/properties/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"properties",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{flagedPropertyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "My Properties (Owner - Paginate/Filtre/Sıralama)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('Owner's property list paginated', function() { pm.expect(json).to.have.property('pagination'); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "role",
								"value": "property_owner",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/properties/my/properties?sortBy=createdAt&sortOrder=desc&page=1&limit=10&country=Germany",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"properties",
								"my",
								"properties"
							],
							"query": [
								{
									"key": "status",
									"value": "published",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "createdAt"
								},
								{
									"key": "sortOrder",
									"value": "desc"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "country",
									"value": "Germany"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Property Detail (Owner - AdminNotes)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "role",
								"value": "property_owner",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/properties/my/properties/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"properties",
								"my",
								"properties",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{propertyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Property Statistics (Owner)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "role",
								"value": "property_owner",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/properties/:id/statistics",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"properties",
								":id",
								"statistics"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{propertyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Property Statistics (Owner)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "role",
								"value": "property_owner",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/properties/my/statistics",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"properties",
								"my",
								"statistics"
							]
						}
					},
					"response": []
				},
				{
					"name": "Feature Property (Owner)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "role",
								"value": "property_owner",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"duration\": 2\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/properties/:id/feature",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"properties",
								":id",
								"feature"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{propertyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Featured Properties",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "role",
								"value": "investor",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/properties/featured?page=1&limit=5&city=Porto",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"properties",
								"featured"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "country",
									"value": null,
									"disabled": true
								},
								{
									"key": "city",
									"value": "Porto"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Properties for Map",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "role",
								"value": "investor",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/properties/map?country=Portugal&city=Lisbon",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"properties",
								"map"
							],
							"query": [
								{
									"key": "country",
									"value": "Portugal"
								},
								{
									"key": "city",
									"value": "Lisbon"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Favorite/Unfavorite Property (Investor)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "role",
								"value": "investor",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/properties/:id/favorite",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"properties",
								":id",
								"favorite"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{propertyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "My Favorite Properties (Investor)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "role",
								"value": "investor",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/properties/my/favorites?propertyType=apartment&sortBy=annualYieldPercent&sortOrder=desc&page=1&limit=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"properties",
								"my",
								"favorites"
							],
							"query": [
								{
									"key": "country",
									"value": "Portugal",
									"disabled": true
								},
								{
									"key": "city",
									"value": "Lisbon",
									"disabled": true
								},
								{
									"key": "propertyType",
									"value": "apartment"
								},
								{
									"key": "annualYieldPercentMin",
									"value": "15",
									"disabled": true
								},
								{
									"key": "requestedInvestmentMax",
									"value": "100000",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "annualYieldPercent"
								},
								{
									"key": "sortOrder",
									"value": "desc"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - List All Properties",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "role",
								"value": "admin",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/properties/admin/all?country=Portugal&page=1&limit=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"properties",
								"admin",
								"all"
							],
							"query": [
								{
									"key": "country",
									"value": "Portugal"
								},
								{
									"key": "city",
									"value": "Lisbon",
									"disabled": true
								},
								{
									"key": "propertyType",
									"value": "apartment",
									"disabled": true
								},
								{
									"key": "annualYieldPercentMin",
									"value": "15",
									"disabled": true
								},
								{
									"key": "requestedInvestmentMax",
									"value": "100000",
									"disabled": true
								},
								{
									"key": "sortBy",
									"value": "annualYieldPercent",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								},
								{
									"key": "status",
									"value": "published",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Update Property Status",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "role",
								"value": "admin",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"published\",\n  \"reviewNotes\": \"Looks good, approved.\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/properties/:id/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"properties",
								":id",
								"status"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{unPublishedPropertyId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Flag Property",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "role",
								"value": "admin",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"issues\": [\"Invalid address\"],\n  \"action\": \"add\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/properties/:id/flag",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"properties",
								":id",
								"flag"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{flagedPropertyId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Get My Notifications (Filtre, Sıralama, Paginate)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('Data is array', function () { pm.expect(Array.isArray(json.data)).to.be.true; });",
									"pm.test('Notification fields', function() { if(json.data.length > 0) pm.expect(json.data[0]).to.have.property('title'); });"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/notifications/my?type=rent_payment_received&unreadOnly=false&limit=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notifications",
								"my"
							],
							"query": [
								{
									"key": "type",
									"value": "rent_payment_received"
								},
								{
									"key": "unreadOnly",
									"value": "false"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get My Notifications (Only Unread)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('Data is array', function () { pm.expect(Array.isArray(json.data)).to.be.true; });",
									"pm.test('Unread only', function() { if(json.data.length > 0) pm.expect(json.data[0].isRead).to.eql(false); });"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/notifications/my?unreadOnly=true&limit=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notifications",
								"my"
							],
							"query": [
								{
									"key": "unreadOnly",
									"value": "true"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get My Notifications (Farklı Type ve Limit ile)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/notifications/my?limit=3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notifications",
								"my"
							],
							"query": [
								{
									"key": "type",
									"value": "offer_accepted",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get My Unread Notification Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('Has unreadCount', function() { pm.expect(json.data).to.have.property('unreadCount'); });"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/notifications/my/unread-count",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notifications",
								"my",
								"unread-count"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mark Notification As Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('Marked as read', function() { pm.expect(json.message).to.include('marked as read'); });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/notifications/:id/read",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notifications",
								":id",
								"read"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{notificationId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mark All Notifications As Read",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('All marked as read', function() { pm.expect(json.message).to.include('All notifications marked as read'); });"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/notifications/mark-all-read",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notifications",
								"mark-all-read"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Send Bulk Notification (role veya ülkeye)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('Bulk notification sent', function() { pm.expect(json.data).to.have.property('recipientCount'); });"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"filters\": { \"role\": \"investor\", \"country\": \"Turkey\" },\n  \"notification\": {\n    \"type\": \"system_announcement\",\n    \"title\": \"Test Bulk\",\n    \"message\": \"Bu bir test bulk notification'dır.\",\n    \"priority\": \"medium\"\n  }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/notifications/bulk",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notifications",
								"bulk"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin - Send System Notification (Everyone)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () { pm.response.to.have.status(200); });",
									"let json = pm.response.json();",
									"pm.test('System notification sent', function() { pm.expect(json.data).to.have.property('recipientCount'); });"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"System Outage\",\n  \"message\": \"Scheduled maintenance on Sunday.\",\n  \"priority\": \"high\",\n  \"type\": \"system_maintenance\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/notifications/system",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notifications",
								"system"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "1. PUBLIC ROUTES",
					"item": [
						{
							"name": "1.1 Register - Investor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 201', function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test('Response has user data', function () {",
											"    pm.expect(response.data.user).to.have.property('id');",
											"    pm.expect(response.data.user).to.have.property('email');",
											"});",
											"",
											"// Save userId for later tests",
											"pm.collectionVariables.set('userId', response.data.user.id);",
											"",
											"// Check if email verification is skipped (dev mode)",
											"if (response.data.user.emailVerified === true) {",
											"    console.log('Email verification skipped (Development Mode)');",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"investortt.test@example.com\",\n    \"password\": \"Test123!@#\",\n    \"fullName\": \"Test Investor\",\n    \"phoneNumber\": \"+905551234567\",\n    \"country\": \"TR\",\n    \"role\": \"investor\",\n    \"acceptedTerms\": true,\n    \"acceptedGDPR\": true,\n    \"marketingConsent\": false\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.2 Register - Property Owner",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"owner.test@example.com\",\n    \"password\": \"Test123!@#\",\n    \"fullName\": \"Test Property Owner\",\n    \"phoneNumber\": \"+905551234568\",\n    \"country\": \"TR\",\n    \"role\": \"property_owner\",\n    \"acceptedTerms\": true,\n    \"acceptedGDPR\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.3 Register - Local Representative",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"rep.test@example.com\",\n    \"password\": \"Test123!@#\",\n    \"fullName\": \"Test Representative\",\n    \"phoneNumber\": \"+905551234569\",\n    \"country\": \"TR\",\n    \"region\": \"Istanbul\",\n    \"role\": \"local_representative\",\n    \"acceptedTerms\": true,\n    \"acceptedGDPR\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.4 Login - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test('Response has tokens', function () {",
											"    pm.expect(response.data).to.have.property('accessToken');",
											"    pm.expect(response.data).to.have.property('refreshToken');",
											"});",
											"",
											"// Save tokens for authenticated requests",
											"pm.collectionVariables.set('accessToken', response.data.accessToken);",
											"pm.collectionVariables.set('refreshToken', response.data.refreshToken);",
											"",
											"console.log('Login successful! Tokens saved.');",
											"",
											"// Check if 2FA is required",
											"if (response.data.requiresTwoFactor) {",
											"    console.log('2FA required. Method:', response.data.method);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"admin@admin.com\",\n    \"password\": \"Admin123!@#\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.5 Login - With Remember Me",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"investor.test@example.com\",\n    \"password\": \"NewPassword123!@#2\",\n    \"rememberMe\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.6 Login - Wrong Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 401', function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test('Error message is correct', function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.message).to.include('Email veya şifre hatalı');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"investor.test@example.com\",\n    \"password\": \"WrongPassword123\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "1.7 Forgot Password",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"investor.test@example.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/forgot-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"forgot-password"
									]
								},
								"description": "Console'da reset token görünecek (development mode)"
							},
							"response": []
						},
						{
							"name": "1.8 Reset Password",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"NewPassword123!@#2\",\n    \"confirmPassword\": \"NewPassword123!@#2\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/reset-password/{{resetToken}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"reset-password",
										"{{resetToken}}"
									]
								},
								"description": "resetToken'ı console'dan alın"
							},
							"response": []
						},
						{
							"name": "1.9 Verify Email",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/verify-email/{{verificationToken}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"verify-email",
										"{{verificationToken}}"
									]
								},
								"description": "verificationToken'ı console'dan alın (dev mode'da skip edilir)"
							},
							"response": []
						},
						{
							"name": "1.10 Resend Verification Email",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"investor.test@example.com\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/resend-verification",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"resend-verification"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2. AUTHENTICATED ROUTES",
					"item": [
						{
							"name": "2.1 Get Current User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('User data is complete', function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.data).to.have.property('id');",
											"    pm.expect(response.data).to.have.property('email');",
											"    pm.expect(response.data).to.have.property('role');",
											"    pm.expect(response.data).to.have.property('membershipPlan');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/me",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.2 Update Profile",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fullName\": \"Updated Test User\",\n    \"phoneNumber\": \"+905559876543\",\n    \"country\": \"US\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.3 Change Password",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentPassword\": \"NewPassword123!@#2\",\n    \"newPassword\": \"NewTest1234!@#\",\n    \"confirmPassword\": \"NewTest1234!@#\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/change-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"change-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.4 Logout",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refreshToken\": \"{{refreshToken}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "2.5 Refresh Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('New tokens received', function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.data).to.have.property('accessToken');",
											"    pm.expect(response.data).to.have.property('refreshToken');",
											"    ",
											"    // Update tokens",
											"    pm.collectionVariables.set('accessToken', response.data.accessToken);",
											"    pm.collectionVariables.set('refreshToken', response.data.refreshToken);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refreshToken\": \"{{refreshToken}}\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/refresh-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"refresh-token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3. 2FA ROUTES",
					"item": [
						{
							"name": "3.1 Setup 2FA - Authenticator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('QR code and secret received', function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.data).to.have.property('qrCode');",
											"    pm.expect(response.data).to.have.property('manualEntryKey');",
											"    ",
											"    console.log('Manual Entry Key:', response.data.manualEntryKey);",
											"    console.log('Use this key in Google Authenticator, Authy, etc.');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"method\": \"authenticator\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/2fa/setup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"2fa",
										"setup"
									]
								},
								"description": "QR kodu tarayın veya manual key'i authenticator app'e girin"
							},
							"response": []
						},
						{
							"name": "3.2 Setup 2FA - Email",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"method\": \"email\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/2fa/setup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"2fa",
										"setup"
									]
								},
								"description": "Console'da email kodu görünecek"
							},
							"response": []
						},
						{
							"name": "3.3 Setup 2FA - SMS",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"method\": \"sms\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/2fa/setup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"2fa",
										"setup"
									]
								},
								"description": "Console'da SMS kodu görünecek"
							},
							"response": []
						},
						{
							"name": "3.4 Enable 2FA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Backup codes received', function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.data).to.have.property('backupCodes');",
											"    pm.expect(response.data.backupCodes).to.be.an('array');",
											"    pm.expect(response.data.backupCodes).to.have.lengthOf(10);",
											"    ",
											"    console.log('BACKUP CODES - SAVE THESE:');",
											"    response.data.backupCodes.forEach(code => console.log(code));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"600639\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/2fa/enable",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"2fa",
										"enable"
									]
								},
								"description": "Authenticator app'teki veya console'daki kodu girin"
							},
							"response": []
						},
						{
							"name": "3.5 Login with 2FA",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"investor.test@example.com\",\n    \"password\": \"NewPassword123!@#2\",\n    \"twoFactorCode\": \"640927\",\n    \"rememberMe\": true\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"login"
									]
								},
								"description": "2FA etkinse kod gerekli"
							},
							"response": []
						},
						{
							"name": "3.6 Disable 2FA",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"Test123!@#\",\n    \"code\": \"LBJFAVCMNM5U2RBGHR4XGVB4O5PGIMZYJQ3DGNTSLI7WS5SLI4TA\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/2fa/disable",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"2fa",
										"disable"
									]
								}
							},
							"response": []
						},
						{
							"name": "3.7 Generate New Backup Codes",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"Test123!@#\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/2fa/backup-codes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"2fa",
										"backup-codes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4. MEMBERSHIP ROUTES",
					"item": [
						{
							"name": "4.1 Get Membership Status",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/membership/status",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"membership",
										"status"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.2 Change Membership Plan",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"newPlan\": \"Enterprise\",\n    \"paymentId\": \"payment_123456\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/membership/change",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"membership",
										"change"
									]
								}
							},
							"response": []
						},
						{
							"name": "4.3 Cancel Membership",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reason\": \"Too expensive\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/membership/cancel",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"membership",
										"cancel"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "5. ACCOUNT DELETION",
					"item": [
						{
							"name": "5.1 Request Account Deletion",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"reason\": \"I don't need the service anymore\",\n    \"password\": \"Test123!@#\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/account/delete-request",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"account",
										"delete-request"
									]
								}
							},
							"response": []
						},
						{
							"name": "5.2 Cancel Account Deletion",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/account/cancel-deletion",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"account",
										"cancel-deletion"
									]
								}
							},
							"response": []
						},
						{
							"name": "Admin - Account Deletion",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/admin/account-deletion-requests?page=1&limit=10&status=all&sortBy=requestedAt&sortOrder=desc",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"admin",
										"account-deletion-requests"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "status",
											"value": "all"
										},
										{
											"key": "sortBy",
											"value": "requestedAt"
										},
										{
											"key": "sortOrder",
											"value": "desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Account Deletion Request By ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/admin/account-deletion-requests/{{requestId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"admin",
										"account-deletion-requests",
										"{{requestId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "6. SECURITY ROUTES",
					"item": [
						{
							"name": "6.1 Get Login History",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/security/login-history?limit=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"security",
										"login-history"
									],
									"query": [
										{
											"key": "limit",
											"value": "20"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6.2 Get Active Sessions",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/security/sessions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"security",
										"sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.3 Revoke All Sessions",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"NewPassword123!@#2\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/security/revoke-all-sessions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"security",
										"revoke-all-sessions"
									]
								}
							},
							"response": []
						},
						{
							"name": "6.4 Add Trusted IP",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ip\": \"192.168.1.1\",\n    \"name\": \"Home IP\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/auth/security/trusted-ip",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"security",
										"trusted-ip"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Trusted IPs",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/auth/security/trusted-ip",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"security",
										"trusted-ip"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Trusted IP",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"ip\": \"192.168.1.1\",    \r\n\"name\": \"Ev IP Adresi\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/auth/security/trusted-ip",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"security",
										"trusted-ip"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Trusted IP",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/auth/security/trusted-ip/192.168.1.1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"auth",
										"security",
										"trusted-ip",
										"192.168.1.1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "KycApproved",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminAcessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/admin/users/{{userId}}/approve-kyc",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"admin",
								"users",
								"{{userId}}",
								"approve-kyc"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pending KYC Users (Paginated)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminAcessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/admin/pending-kyc?page=1&limit=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"admin",
								"pending-kyc"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "sortBy",
									"value": "createdAt",
									"disabled": true
								},
								{
									"key": "sortOrder",
									"value": "desc",
									"disabled": true
								},
								{
									"key": "search",
									"value": "",
									"disabled": true
								},
								{
									"key": "country",
									"value": "",
									"disabled": true
								},
								{
									"key": "role",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pending KYC User By ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{adminAcessToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/admin/pending-kyc/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"admin",
								"pending-kyc",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "MembershipPlans",
			"item": [
				{
					"name": "Public Endpoints",
					"item": [
						{
							"name": "Get All Public Plans",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status 200', function () { ",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"let json = pm.response.json();",
											"pm.test('Has plans array', function() { ",
											"    pm.expect(json.data).to.be.an('array'); ",
											"});",
											"",
											"if(json.data && json.data.length > 0) {",
											"    pm.environment.set('planId', json.data[0]._id);",
											"    if(json.data.length > 1) {",
											"        pm.environment.set('planId2', json.data[1]._id);",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/membership-plans",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"membership-plans"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Plan By ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status 200', function () { ",
											"    pm.response.to.have.status(200); ",
											"});",
											"",
											"let json = pm.response.json();",
											"pm.test('Has plan details', function() { ",
											"    pm.expect(json.data).to.have.property('name');",
											"    pm.expect(json.data).to.have.property('features');",
											"    pm.expect(json.data).to.have.property('pricing');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/membership-plans/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"membership-plans",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{planId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Featured Plans",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/membership-plans/featured",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"membership-plans",
										"featured"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Trial Plans",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/membership-plans/trial",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"membership-plans",
										"trial"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Plans By Feature",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/membership-plans/by-feature?feature=api.hasAccess&value=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"membership-plans",
										"by-feature"
									],
									"query": [
										{
											"key": "feature",
											"value": "api.hasAccess"
										},
										{
											"key": "value",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Compare Plans",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"planIds\": [\"{{planId}}\", \"{{planId2}}\"]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/membership-plans/compare",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"membership-plans",
										"compare"
									]
								}
							},
							"response": []
						},
						{
							"name": "Calculate Plan Price",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"interval\": \"monthly\",\n    \"promoCode\": \"SUMMER2025\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/membership-plans/:id/calculate-price",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"membership-plans",
										":id",
										"calculate-price"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{planId2}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin Endpoints",
					"item": [
						{
							"name": "Get All Plans (Admin)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{adminAccessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/membership-plans/admin/all?includeInactive=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"membership-plans",
										"admin",
										"all"
									],
									"query": [
										{
											"key": "includeInactive",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create New Plan (Admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status 201', function () { ",
											"    pm.response.to.have.status(201); ",
											"});",
											"",
											"let json = pm.response.json();",
											"if(json.data && json.data._id) {",
											"    pm.environment.set('newPlanId', json.data._id);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{adminAcessToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"premium\",\n    \"displayName\": \"Premium\",\n    \"description\": \"Advanced features for professional investors\",\n    \"tier\": 4,\n    \"order\": 4,\n    \"isActive\": true,\n    \"isVisible\": true,\n    \"pricing\": {\n        \"monthly\": {\n            \"amount\": 49,\n            \"currency\": \"EUR\"\n        },\n        \"yearly\": {\n            \"amount\": 470,\n            \"currency\": \"EUR\",\n            \"discountPercentage\": 20\n        },\n        \"trial\": {\n            \"enabled\": true,\n            \"days\": 14,\n            \"requiresCard\": true\n        }\n    },\n    \"features\": {\n        \"investments\": {\n            \"maxActiveInvestments\": 10,\n            \"maxMonthlyInvestments\": 5,\n            \"minInvestmentAmount\": 2500,\n            \"maxInvestmentAmount\": 1000000,\n            \"allowBulkInvestments\": false\n        },\n        \"properties\": {\n            \"maxActiveProperties\": 5,\n            \"canListProperties\": true,\n            \"priorityListing\": true,\n            \"featuredListingDays\": 14\n        },\n        \"commissions\": {\n            \"platformCommissionDiscount\": 2,\n            \"rentalCommissionDiscount\": 1,\n            \"referralBonusMultiplier\": 1.3\n        },\n        \"support\": {\n            \"level\": \"priority\",\n            \"responseTime\": \"12h\",\n            \"hasPhoneSupport\": false,\n            \"hasDedicatedManager\": false,\n            \"hasLiveChat\": true\n        },\n        \"services\": {\n            \"includedServices\": [],\n            \"serviceDiscounts\": {\n                \"visa_consultancy\": 20,\n                \"legal_support\": 10,\n                \"tax_advisory\": 10,\n                \"property_management\": 15\n            }\n        },\n        \"analytics\": {\n            \"hasBasicAnalytics\": true,\n            \"hasAdvancedAnalytics\": true,\n            \"hasMarketReports\": false,\n            \"hasCustomReports\": false,\n            \"dataExportFormats\": [\"csv\", \"excel\"]\n        },\n        \"api\": {\n            \"hasAccess\": false,\n            \"rateLimit\": 0,\n            \"webhooksEnabled\": false\n        },\n        \"referral\": {\n            \"canEarnCommission\": true,\n            \"commissionRate\": 8,\n            \"maxReferrals\": 100,\n            \"bonusThresholds\": [\n                {\"count\": 10, \"bonus\": 75},\n                {\"count\": 25, \"bonus\": 200}\n            ]\n        },\n        \"notifications\": {\n            \"emailNotifications\": true,\n            \"smsNotifications\": true,\n            \"pushNotifications\": true,\n            \"whatsappNotifications\": false\n        },\n        \"security\": {\n            \"twoFactorAuth\": true,\n            \"ipWhitelisting\": false,\n            \"sessionManagement\": true,\n            \"auditLogs\": false\n        }\n    },\n    \"restrictions\": {\n        \"minAge\": 18,\n        \"allowedCountries\": [],\n        \"blockedCountries\": [],\n        \"requiredKycLevel\": \"advanced\",\n        \"maxUsersCount\": -1\n    },\n    \"metadata\": {\n        \"color\": \"#8B5CF6\",\n        \"icon\": \"star\",\n        \"badge\": \"Popular\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/membership-plans/admin/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"membership-plans",
										"admin",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Plan (Admin)",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{adminAcessToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"Updated description for the plan\",\n    \"isHighlighted\": true,\n    \"metadata\": {\n        \"badge\": \"Best Value\",\n        \"color\": \"#22C55E\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/membership-plans/admin/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"membership-plans",
										"admin",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{planId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Plan Features (Admin)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{adminAcessToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"features\": {\n        \"investments\": {\n            \"maxActiveInvestments\": 15,\n            \"maxMonthlyInvestments\": 10,\n            \"minInvestmentAmount\": 1000,\n            \"maxInvestmentAmount\": -1,\n            \"allowBulkInvestments\": true\n        },\n        \"api\": {\n            \"hasAccess\": true,\n            \"rateLimit\": 5000,\n            \"webhooksEnabled\": true\n        },\n        \"support\": {\n            \"level\": \"dedicated\",\n            \"responseTime\": \"1h\",\n            \"hasPhoneSupport\": true,\n            \"hasDedicatedManager\": true,\n            \"hasLiveChat\": true\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/membership-plans/admin/:id/features",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"membership-plans",
										"admin",
										":id",
										"features"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{planId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Plan Pricing (Admin)",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{adminAcessToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"pricing\": {\n        \"monthly\": {\n            \"amount\": 29,\n            \"currency\": \"EUR\",\n            \"originalAmount\": 49\n        },\n        \"yearly\": {\n            \"amount\": 278,\n            \"currency\": \"EUR\",\n            \"discountPercentage\": 20,\n            \"originalAmount\": 348\n        },\n        \"trial\": {\n            \"enabled\": true,\n            \"days\": 7,\n            \"requiresCard\": false\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/membership-plans/admin/:id/pricing",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"membership-plans",
										"admin",
										":id",
										"pricing"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{planId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add/Update Promotion (Admin)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{adminAcessToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"NEWYEAR2025\",\n    \"discountPercentage\": 25,\n    \"validUntil\": \"2025-11-28T23:59:59Z\",\n    \"maxUses\": 100\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/membership-plans/admin/:id/promotion",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"membership-plans",
										"admin",
										":id",
										"promotion"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{planId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Plans Order (Admin)",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{adminAcessToken}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"orders\": [\n        {\n            \"planId\": \"{{planId}}\",\n            \"order\": 1\n        },\n        {\n            \"planId\": \"{{planId2}}\",\n            \"order\": 2\n        },\n        {\n            \"planId\": \"{{newPlanId}}\",\n            \"order\": 3\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/membership-plans/admin/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"membership-plans",
										"admin",
										"order"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Plan Statistics (Admin)",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{adminAcessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/membership-plans/admin/:id/statistics?startDate=2025-01-01&endDate=2025-12-31",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"membership-plans",
										"admin",
										":id",
										"statistics"
									],
									"query": [
										{
											"key": "startDate",
											"value": "2025-01-01"
										},
										{
											"key": "endDate",
											"value": "2025-12-31"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "{{planId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Plan (Admin)",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{adminAcessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/membership-plans/admin/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"membership-plans",
										"admin",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{newPlanId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Authenticated Endpoints",
					"item": [
						{
							"name": "Get Upgrade Recommendations",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/membership-plans/recommendations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"membership-plans",
										"recommendations"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000/api/v1",
			"type": "string"
		},
		{
			"key": "propertyId",
			"value": "6893a0d7434a45479a4b6f17",
			"type": "string"
		},
		{
			"key": "investmentId",
			"value": "6893a462bec3006224cb9124",
			"type": "string"
		},
		{
			"key": "propertyIdForInvestment",
			"value": "6893a0d7434a45479a4b6f1b",
			"type": "string"
		},
		{
			"key": "unPublishedPropertyId",
			"value": "6893a1f9bec3006224cb908a",
			"type": "string"
		},
		{
			"key": "flagedPropertyId",
			"value": "6893a3d6bec3006224cb90fc",
			"type": "string"
		},
		{
			"key": "SendedInvestmentId",
			"value": "6893a462bec3006224cb9124",
			"type": "string"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "refreshToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "verificationToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "resetToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "adminAcessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "planId",
			"value": "689e067d02a492275db9a3a8",
			"type": "default"
		},
		{
			"key": "planId2",
			"value": "689e067d02a492275db9a3ab",
			"type": "default"
		},
		{
			"key": "planId2",
			"value": ""
		},
		{
			"key": "newPlanId",
			"value": "689f764f372dab3e3018a01f",
			"type": "default"
		}
	]
}